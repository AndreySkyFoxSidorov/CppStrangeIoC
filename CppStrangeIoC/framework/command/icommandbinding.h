#pragma once






using namespace strange::framework::api;

namespace strange
{
namespace extensions
{
namespace command
{
namespace api
{
class ICommandBinding : public IBinding
{
	/// Declares that the Binding is a one-off. As soon as it's satisfied, it will be unmapped.
public:
	virtual ICommandBinding* Once() = 0;

	/// Get/set the property set to `true` by `Once()`
	virtual bool getisOneOff() const = 0;
	virtual void setisOneOff( const bool& value ) = 0;

	/// Declares that the bound commands will be run in parallel.
	/// Parallel is the default. There is no need to call this unless you're changing from sequence.
	virtual ICommandBinding* InParallel() = 0;

	/// Declares that the bound commands will be run as a sequence, rather than in parallel
	virtual ICommandBinding* InSequence() = 0;

	/// Declares that the Commands generated by this binding will be pooled
	virtual ICommandBinding* Pooled() = 0;

	/// Get/set the propterty set by InSequence() and InParallel()
	virtual bool getisSequence() const = 0;
	virtual void setisSequence( const bool& value ) = 0;

	/// Get/set the propterty set by Pooled()
	virtual bool getisPooled() const = 0;
	virtual void setisPooled( const bool& value ) = 0;

	template<typename T>
	ICommandBinding* Bind() = 0;
	virtual ICommandBinding* Bind( void* key ) = 0;
	template<typename T>
	ICommandBinding* To() = 0;
	virtual ICommandBinding* To( void* o ) = 0;
	template<typename T>
	ICommandBinding* ToName() = 0;
	virtual ICommandBinding* ToName( void* o ) = 0;
	template<typename T>
	ICommandBinding* Named() = 0;
	virtual ICommandBinding* Named( void* o ) = 0;
};
}
}
}
}

